- set_title t('navigation.notices')
- set_crumbs t('navigation.notices') => url_for

= render 'activation_popup'

- if @notices.present?
  = form_tag bulk_notices_path, method: :post do
    .panel.panel-default
      .panel-heading
        .row
          .col-lg-6.hidden-xs
            h2.panel-title= t('notices.manage_your_history')
          .col-lg-6
            .pull-right= link_to new_notice_path, class: 'btn btn-sm btn-default', title: t('notices.draft_it') do
              span.glyphicon.glyphicon-pencil.smaller
      .table-responsive
        table.table.table-striped.table-hover
          thead
            tr
              th= check_box_tag :select_all, '', false, onchange: "$('.select-all').prop('checked', $(this).prop('checked'))"
              th
              th= t('notices.table_header.sent')
              th= t('notices.table_header.question')
              th= t('notices.table_header.policy')
              th= t('notices.table_header.opened')
              th
          tbody
          - @notices.each do |notice|
            tr
              td= check_box_tag "selected[]", notice.id, false, class: 'select-all'
              td
                - if notice.closed?
                  span.label.label-primary.glyphicon.glyphicon-fire'= t('notices.status.burned')
                - elsif notice.disabled?
                  span.label.label-warning.glyphicon.glyphicon-minus-sign'= t('notices.status.disabled')
                - else
                  span.label.label-success.glyphicon.glyphicon-eye-open'= t('notices.status.open')
              td= notice.created_at.to_s(:short)
              td= link_to notice.question, notice_path(notice, anchor: :openings) 
              td
                - case notice.policy.name
                - when 'burn_after_reading'
                  span.glyphicon.glyphicon-fire.smaller
                  span< after reading
                - when 'burn_after_time'
                  span.glyphicon.glyphicon-time.smaller
                  span<= "#{notice.policy.duration} #{t('notices.day').pluralize(notice.policy.duration)}"
                - when 'burn_after_openings'
                  span.glyphicon.glyphicon-asterisk.smaller
                  span<= t('notices.reads', count: notice.policy.amount)
              td.openings
                - if notice.openings.present?
                  = link_to notice_path(notice, anchor: :openings) do
                    span.glyphicon.glyphicon-th-list'
                    span= t('notices.times', count: notice.openings.size)
                - else
                  span -
              td
                .btn-group.flex-buttons
                  - unless notice.closed?
                    = link_to open_path(notice), class: 'btn btn-primary', title: t('notices.read')
                      span.glyphicon.glyphicon-eye-open.smaller
                  - if notice.disabled?
                    = link_to enable_notice_path(notice), method: :patch, class: 'btn btn-primary', title: t('notices.enable')
                      span.glyphicon.glyphicon-plus-sign.smaller
                  - elsif notice.open?
                    = link_to share_notice_path(notice), class: 'btn btn-primary', title: t('notices.share')
                      span.glyphicon.glyphicon-share.smaller
                    = link_to disable_notice_path(notice), method: :patch, class: 'btn btn-primary', title: t('notices.disable')
                      span.glyphicon.glyphicon-minus-sign.smaller
                  = link_to notice_path(notice), method: :delete, data: {confirm: t('notices.confirm')}, class: 'btn btn-primary', title: t('notices.destroy')
                    span.glyphicon.glyphicon-trash.smaller
      .panel-footer
        .row
          .col-lg-12
            .btn-group
              button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown"
                | #{t('notices.bulk_actions')} <span class="caret"></span>
              ul.dropdown-menu role="menu"
                li
                  = link_to '#', onclick: "event.preventDefault(); $(this).closest('form').submit()", data: {confirm: t('notices.confirm')} do
                    span.glyphicon.glyphicon-trash.smaller'
                    span= t('notices.bulk_destroy')
            .pull-right= link_to new_notice_path, class: 'btn btn-sm btn-default', title: t('notices.draft_it') do
              span.glyphicon.glyphicon-pencil.smaller
  .text-center
    = paginate @notices

- else
  = render 'blank_slate'
