- set_title('Notices')
- set_crumbs('Notices' => url_for)

= render 'activation_popup'

- if @notices.present?
  = form_tag bulk_notices_path, method: :post do
    .panel.panel-default
      .panel-heading
        .row
          .col-lg-6
            h2.panel-title.hidden-xs
              | Manage your Burn-Noice history
          .col-lg-6
            .pull-right= link_to new_notice_path, class: 'btn btn-sm btn-default' do
              span.glyphicon.glyphicon-pencil.smaller'
              | Draft
      table.table.table-striped.table-hover
        thead
          tr
            th.hidden-xs= check_box_tag :select_all, '', false, onchange: "$('.select-all').prop('checked', $(this).prop('checked'))"
            th Status
            th Sent
            th.hidden-xs Question
            th Policy
            th.hidden-xs Opened
            th
        tbody
        - @notices.each do |notice|
          tr
            td.hidden-xs= check_box_tag "selected[]", notice.id, false, class: 'select-all'
            td
              - if notice.closed?
                span.visible-xs.label.label-primary.glyphicon.glyphicon-fire
                span.hidden-xs.label.label-primary Burned
              - elsif notice.disabled?
                span.visible-xs.label.label-warning.glyphicon.glyphicon-minus-sign
                span.hidden-xs.label.label-warning Disabled
              - else
                span.visible-xs.label.label-success.glyphicon.glyphicon-eye-open
                span.hidden-xs.label.label-success Readable
            td= notice.created_at.to_s(:short)
            td= notice.question
            td
              - case notice.policy.name
              - when 'burn_after_reading'
                span.glyphicon.glyphicon-fire.smaller
                span.hidden-xs< after reading
              - when 'burn_after_time'
                span.glyphicon.glyphicon-time.smaller
                span.hidden-xs<= "#{notice.policy.duration} #{'day'.pluralize(notice.policy.duration)}"
              - when 'burn_after_openings'
                span.glyphicon.glyphicon-asterisk.smaller
                span.hidden-xs<= "#{notice.policy.amount} reads"
            td.hidden-xs.openings
              - if notice.openings.present?
                = render 'opening_modal', notice: notice
                = link_to '#', "data-toggle" => "modal", "data-target" => "#opening_modal_#{notice.id}" do
                  span.glyphicon.glyphicon-th-list'
                  span #{notice.openings.size} times
              - else
                span -
            td
              .btn-group
                button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown"
                  | Actions <span class="caret"></span>
                ul.dropdown-menu role="menu"
                  - unless notice.closed?
                    li
                      = link_to open_path(notice), style: 'text-decoration: none'
                        span.glyphicon.glyphicon-eye-open.smaller'
                        span.margin-left-small read
                  - if notice.disabled?
                    li
                      = link_to enable_notice_path(notice), method: :patch, style: 'text-decoration: none'
                        span.glyphicon.glyphicon-plus-sign.smaller'
                        span.margin-left-small enable
                  - elsif notice.open?
                    li
                      = link_to share_notice_path(notice), style: 'text-decoration: none'
                        span.glyphicon.glyphicon-share.smaller'
                        span.margin-left-small share
                    li
                      = link_to disable_notice_path(notice), method: :patch, style: 'text-decoration: none'
                        span.glyphicon.glyphicon-minus-sign.smaller'
                        span.margin-left-small disable
                  li
                    = link_to notice_path(notice), method: :delete, data: {confirm: "This can't be undone!"}, style: 'text-decoration: none'
                      span.glyphicon.glyphicon-trash.smaller'
                      span.margin-left-small delete
      .panel-footer
        .row
          .col-lg-12
            .btn-group.hidden-xs
              button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown"
                | Bulk <span class="caret"></span>
              ul.dropdown-menu role="menu"
                li
                  = link_to '#', onclick: "event.preventDefault(); $(this).closest('form').submit()" do
                    span.glyphicon.glyphicon-trash.smaller'
                    span delete
            .pull-right= link_to new_notice_path, class: 'btn btn-sm btn-default' do
              span.glyphicon.glyphicon-pencil.smaller'
              | Draft
  .text-center
    = paginate @notices

- else
  .page-header
    h2 You are just <span class="text-success">3 simple steps</span> away from your first Burn-Notice!

  = render 'three_step'
  .row
    .col-lg-12
      .well
        .pull-right
          = link_to first_step_notices_path, class: 'btn btn-success btn-lg' do
            strong.step.success-step-button> 1
            span.text-error draft it
        p
          |
            Just follow the steps to create a new Burn-Notice.
            Every step has a couple of explanations, so you will know exactly what the step is for.
            Make sure to read the instructions, so your data is stored in our database with a strong password.
            This will make unauthorized access to your data impossible.
